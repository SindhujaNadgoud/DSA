So a node consists of Value(root) , List<Node> children

 Number of nodes - b^(h+1)-1


 serlisation -> uses recursion to go through the tree

 private void rserialize(Node root, StringBuilder sb) {
        if(root == null) return;
        sb.append((char)(root.val + '0'));
        for(Node child: root.children) 
        rserialize(child, sb);
        sb.append('#');
    }
    // Encodes a tree to a single string.
    public String serialize(Node root) {
        StringBuilder sb = new StringBuilder();
        this.rserialize(root, sb);
        return sb.toString();
    }



// Decodes your encoded data to tree.
    public Node deserialize(String data) {
        if(data.isEmpty()) return null;
        return rdeserialize(data, new int[1]);
    }
    
    private Node rdeserialize(String data, int[] index) {
        if(index[0] == data.length()) return null;
        Node node = new Node(data.charAt(index[0]) - '0', new ArrayList<Node>());
        index[0]++;
        while(data.charAt(index[0]) != '#') 
            node.children.add(rdeserialize(data, index));
        index[0]++;
        return node;
    }
TC : O(n) since each node is processed pnly once
SC : O(n+h) = string builder + recursion stack

